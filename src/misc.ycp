/**
 * File:	include/dns-server/misc.ycp
 * Package:	Configuration of dns-server
 * Summary:	Miscelanous functions for configuration of dns-server.
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

    textdomain "dns-server";

    import "Require";
    import "Mode";
    import "Label";

    /**
      * If modified, ask for confirmation
      * @return true if abort is confirmed
      */
    global define boolean ReallyAbort () ``{
	return ! modified () || UI::ReallyAbortPopup (true);
    }

    /**
      * Get the name of this host
      * @return string hostname of this host
      */
    global define string getLocalHostName () ``{
	string ret = "";
	map bash_out = SCR::Execute (.target.bash_output, "/bin/hostname -f");
	if (bash_out["exit"]:1 == 0)
	{
	    string tmp = bash_out["stdout"]:nil;
	    if (tmp != nil)
	    {
		list l = splitstring (tmp, "\n");
		ret = l[0]:"" + ".";
		y2milestone ("Detected local host name %1", ret);
		return ret;
	    }
	}
	y2error ("Hostname detection failed, using localhost");
	return "localhost";
    }

    /**
      * Get the version of BIND installed
      * @param ask boolean true if can ask user about the version
      * @return integer version of BIND (8 or 9), nil if both or none if can't
      *  ask
      */
    global define integer getBindVersion (boolean ask) ``{
	boolean bind8 = Require::IsPackageInstalledTarget ("bind8");
	boolean bind9 = Require::IsPackageInstalledTarget ("bind9");
	if ((bind8 && ! bind9) || Mode::test)
	{
	    return 8;
	}
	else if (bind9 && ! bind8)
	{
	    return 9;
	}
	else if (! ask)
	{
	    return nil;
	}
	// no installed, both are prevented by dependencies
	UI::OpenDialog (`VBox (
	    // label
	    `Label (_("No DNS daemon is installed.
Select version of DNS daenon to install")),
	    `VSpacing (1),
	    `RadioButtonGroup (`id (`version), `VBox (
		// radio button
		`Left (`RadioButton (`id (8), _("Bind &8"), true)),
		// radio button
		`Left (`RadioButton (`id (9), _("Bind &9")))
	    )),
	    `VSpacing (1),
	    `HBox (
		`HStretch (),
		`PushButton (`id (`ok), Label::OKButton ()),
		`HSpacing (1),
		`PushButton (`id (`cancel), Label::CancelButton ()),
		`HStretch ()
	    )));
	symbol ret = UI::UserInput ();
	integer selected = UI::QueryWidget (`id (`version), `CurrentButton);
	UI::CloseDialog ();
	if (ret != `ok)
	    return nil;
	map packages = $[
	    8 : [[ "bindutil", "bind8" ], [ "bind8-devel" ]],
	    9 : [[ "bind9", "bind9-util" ], [ "bind9-devel", ]]];
	list inst = [];
	list del = [];
	if (selected == 8)
	{
	    inst = packages[8]:[];
	    del = packages[9]:[];
	}
	else
	{
	    inst = packages[9]:[];
	    del = packages[8]:[];
	}
	inst = inst[0]:[];
	del = flatten (del);
	del = filter (`d, del, ``(Require::IsPackageInstalledTarget (d)));
	string message = "";
	if (size (del) > 0)
	    // rich text
	    message = _("<p>Packages %1 will be installed,
packages %2 will be removed.</p>");
	else
	    // ruch text
	    message = _("<p>Packages %1 will be installed.</p>");
	return Require::RequireAndConflictTarget (inst, del, message)
	    ? selected
	    : nil;
    }

    /**
      * Read the zone file
      * @param zone string the zone name
      * @param file string filename of the zone file
      * @return map the contents of the zone
      */
    global define map zoneRead (string zone, string file) ``{
	map zonemap = SCR::Read (.dns.zone, ["/var/lib/named/" + file]);
	map ret = $[
	    "zone" : zone,
	    "ttl" : zonemap["TTL"]:"2W",
	    "soa" : zonemap["soa"]:$[],
	];
	list original_records = zonemap["records"]:[];
	list in_ns = [];
	map in_mx = $[];
	map in_ptr = $[];
	map in_cname = $[];
	map in_a = $[];
	string previous_key = zone + ".";
	map records = $[];
	foreach (`r, original_records, ``{
	    string key = sformat ("%1", r["key"]:"");
	    string type = sformat ("%1", r["type"]:"");
	    string value = sformat ("%1", r["value"]:"");

	    if (key == "")
		key = previous_key;
	    else
		previous_key = key;

	    map host = records[key]:$[];
	    host[type] = add (host[type]:[], value);
	    records[key] = host;
	});
	records = mapmap (`rk, `rv, records, ``{
	    list mx = rv["MX"]:[];
	    map mxmap = $[];
	    foreach (`m, mx, ``{
		list split = splitstring (m, " ");
		split = filter (`s, split, ``(s != ""));
		integer pref = tointeger (split[0]:0);
		mxmap[pref] = split[1]:"";
	    });
	    rv["MX"] = maplist (`k, `v, mxmap, ``(v));
	    return [rk, rv];
	});
	map main = records[zone + "."]:$[];
	records = filter (`k, `v, records, ``(k != zone + "."));
	ret["zone_rec"] = main;
	ret["records"] = records;
	y2milestone ("Read zone %1", ret);
	return ret;
    }

    /**
      * Write the zone file
      * @param zone map zone file contents in a map
      * @return boolean true if success
      */
    global define boolean zoneWrite (map zone) ``{
	string filename = zone["file"]:"";
	string zonename = zone["zone"]:"@";

	map soa = union ($[
		"zone" : "@",
		"expiry" : "6W",
		"mail" : "root",
		"minimum" : "1W",
		"refresh" : "2D",
		"retry" : "4H",
		"server" : "@",
	    ], zone["soa"]:$[]);

	string serial = sformat ("%1", soa["serial"]:"0");
	string suffix = "";
	if (substring (serial, 0, 8) == date)
	{
	    suffix = substring (serial, 8, 2);
	    integer int_suf = tointeger (suffix);
	    int_suf = int_suf + 1;
	    suffix = sformat ("%1", int_suf);
	    if (size (suffix) < 2)
		suffix = "0" + suffix;
	    if (size (suffix) > 2)
		suffix = substring (suffix, 0, 2);
	}
	else
	{
	    suffix = "00";
	}

	soa["serial"] = date + suffix;

	list records = [];
	foreach (`k, `v, zone["zone_rec"]:$[], ``{
	    if (k == "MX")
	    {
		integer mx_index = 0;
		v = maplist (`m, v, ``{
		    mx_index = mx_index + 10;
		    return sformat ("%1 %2", mx_index, m);
		});
	    }
	    foreach (`line, v, ``{
		records = add (records, $[
		    "key" : "",
		    "type" : k,
		    "value" : line,
		]);
	    });
	});

	foreach (`key, `values, zone["records"]:$[], ``{
	    map prefered = filter (`k, `v, values, ``(
		contains (["A", "CNAME", "PTR"], k)));
	    map other = filter (`k, `v, values, ``(
		! contains (["A", "CNAME", "PTR"], k)));
	    foreach (`l, [prefered, other], ``{
		foreach (`type, `values, l, ``{
		    foreach (`v, values, ``{
			records = add (records, $[
			    "key" : key,
			    "type" : type,
			    "value" : v,
			]);
			key = "";
		    });
		});
	    });
	});

	map save = $[
	    "TTL" : zone["ttl"]:"2W",
	    "soa" : soa,
	    "records" : records,
	];

	return SCR::Write (.dns.zone, ["/var/lib/named/" + filename, save]);
    }

    /**
      * Save the global (/etc/named.conf) settings
      * Delete records of deleted zones
      * Don't save zone information to the named.conf
      * @return boolean true on success
      */
    global define boolean saveGlobals () ``{
	// delete all deleted zones first
	list old_sections = SCR::Dir (.dns.named.section);
	list old_zones = filter (`z, old_sections, ``(
	    substring (z, 0, 4) == "zone"));
	list my_zones = maplist (`z, settings["zones"]:[], ``(
	    sformat ("zone \"%1\" in", z["zone"]:"")));
	list del_zones = filter (`z, old_zones, ``(! contains (my_zones, z)));
	y2milestone ("Deleting zones %1", del_zones);
	foreach (`z, del_zones, ``{
	    string filename
		= SCR::Read (add (add (.dns.named.value, z), "file"));
	    SCR::Execute (.target.bash, sformat (
		"test -f %1 && /usr/bin/rm %1",
		filename));
	    SCR::Write (add (.dns.named.section, z), nil);
	});

	// delete all removed options
	list old_options = SCR::Dir (.dns.named.value.options);
	if (old_options == nil)
	    old_options = [];
	list current_options = maplist (`k, `v, settings["options"]:$[], ``(k));
	list del_options = filter (`o, old_options, ``(
	    ! contains (current_options, o)));
	y2milestone ("Deleting options %1", del_options);
	foreach (`o, del_options, ``{
	    SCR::Write (add (.dns.named.value.options, o), nil);
	});

	// save the settings
	foreach (`k, `v, settings["options"]:$[], ``{
	    SCR::Write (add (.dns.named.value.options, k), v);
	});

	// really save the file
	return SCR::Write (.dns.named, nil);
    }

    /**
      * Save zone (both zone file and appropriate part of named.conf
      * Don't flush named.conf to file, just to the agent's memory
      * @param zone map zone contents
      * @return boolean true if success
      */
    global define boolean saveZone (map zone) ``{
	if (! zone["changed"]:false && ! save_all)
	    return true;
	string filename = zone["file"]:"";
	if (filename == "")
	{
	    filename = sformat ("/var/lib/named/master/%1",
		zone["zone"]:"unknown");
	    while (SCR::Read (.target.size, filename) >= 0)
		filename = filename + "I";
	}
	zone["file"] = filename;
	y2milestone ("Writing zone %1", zone);

	// save the changes to named.conf
	path base = add (.dns.named.value,
	    sformat ("zone \"%1\" in", zone["zone"]:""));
	SCR::Write (add (.dns.named.section,
	    sformat ("zone \"%1\" in", zone["zone"]:"")),
	    "");

	list old_options = SCR::Dir (.dns.named.value.options);
	if (old_options == nil)
	    old_options = [];
	list save_options = old_options;

	string zone_type = zone["type"]:"master";

	if (zone_type == "master")
	{
	    // wrote the zone file
	    zoneWrite (zone);
	    save_options = ["type", "file"];

	    // write existing keys
	    SCR::Write (add (base, "file"), "\"" + zone["file"]:"" + "\"");
	}
	else if (zone_type == "slave" || zone_type == "stub")
	{
	    save_options = ["masters"];
	    SCR::Write (add (base, "masters"),zone["masters"]:"");
	}
	else if (zone["type"]:"master" == "hint")
	{
	    save_options = ["type", "file"];
	    SCR::Write (add (base, "file"), "\"" + zone["file"]:"" + "\"");
	}

	list del_options = filter (`o, old_options,
	    ``(! contains (save_options, o)));
	foreach (`o, old_options, ``{
	    SCR::Write (add (base, o), nil);
	});
	SCR::Write (add (base, "type"), zone["type"]:"master");

	return true;
    };

    /**
      * Get the system date in the format of zone serial SOA entry
      * @return string date in requested format
      */
    global define string getDate () ``{
	map bash_out = SCR::Execute (.target.bash_output, "date '+%Y%m%d'");
	string ret = "";
	if (bash_out["exit"]:0 == 0)
	    ret = bash_out["stdout"]:"";
	if (findfirstof (ret, "\n") != nil)
	    ret = substring (ret, 0, findfirstof (ret, "\n"));
	return ret;
    }

    /**
      * Remove quotes around a string
      * @param orig string quoted string
      * @return string unquoted string
      */
    global define string DeQuote (string orig) ``{
	while (substring (orig, 0, 1) == " ")
	    orig = substring (orig, 1);
	while (substring (orig, size (orig) -1) == " ")
	    orig = substring (orig, 0, size (orig) - 1);
	if (substring (orig, 0, 1) == "\""
	    && substring (orig, size (orig) - 2, 1) == "\"")
	{
	    orig = substring (orig, 1, size (orig) - 2);
	}
	return orig;
    }

    /**
      * Add quotes around a string
      * @param orig string unquotes string
      * @return string quoted string
      */
    global define string Quote (string orig) ``{
	return sformat ("\"%1\"", orig);
    }

    /**
      * returns modified list where items index1 and index2 are swapped.
      * if indices are out of bounds, unmodified list is returned.
      * @param input list
      * @param index1 index of the first element
      * @param index2 index og the second element
      * @return list modified list
      */
    global define list swapItems(list input, integer index1, integer index2) ``{
	if (index1 >= size(input) || index2 >= size(input)
	    || index1 < 0 || index2 < 0)
	{
	    return input;
	}
	list output = [];
	integer pos = -1;
	output = maplist(`e, input, ``{
	    pos = pos + 1;
	    if (pos == index1)
	    {
		return select(input, index2, $[]);
	    }
	    else if (pos == index2)
	    {
		return select(input, index1, $[]);
	    }
	    return e;
	});
	return output;
    }

    /**
      * Get zone type from the zone identification
      * @param zone string zone identification
      * @return symbol zone type
      */
    global define symbol getZoneType (string zone) ``{
        string relevant_zone_part = "";
        if (size (zone) > 12
	    && substring (zone, size (zone) - 12) == "in-addr.arpa")
	{
	    return `reverse;
	}
	return `normal;
    }

    /**
      * Prepare a new zone
      * @param zone_type string master or slave
      * @return map of the zone
      */
    global define map createNewZone(string zone_type) ``{
	return $[
	    "type" : zone_type,
	];
    }


/* EOF */
}
