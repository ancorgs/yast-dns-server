/**
 * File:	modules/DnsServerHelperFunctions.ycp
 * Package:	Configuration of dns-server
 * Summary:	Module containing helper functions.
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 *
 * $Id$
 *
 * Module handles dynamic update of zone using 'nsupdate' command.
 * Automatic generation of connected zones and much more!
 */

{

    module "DnsServerHelperFunctions";
    textdomain "dns-server";

    import "DnsServer";
    import "DnsServerAPI";

    /**
     * Returns whether zone is a reverse-zone type
     *
     * @param string zone
     * @return boolean if zone is reverse type
     */
    global define boolean IsReverseZone (string zone) {
        if (zone == nil || zone == "") {
            y2error ("Wrong zone name: '%1'", zone);
            return nil;
        }

        if (
            regexpmatch (zone, ".*\\.in-addr\\.arpa\\.?$")
            ||
            regexpmatch (zone, ".*\\.ip6\\.arpa\\.?$")
        ) {
            return true;
        } else {
            return false;
        }
    }

    global define boolean IsInternalZone (string zone_name) {
        if (zone_name == "" || zone_name == nil) {
            y2error ("Uknown zone: %1", zone_name);
            return nil;
        }

        return (zone_name == "." || zone_name == "0.0.127.in-addr.arpa" || zone_name == "localhost");
    }

global boolean HandleNsupdate (map update_record, string operation, map <string, any> & current_zone) {
    if (! regexpmatch(operation,"^\(add\|delete\)$")) {
        y2error("allowed operation is 'add' or 'delete', not '%1'", operation);
        return false;
    }
    if (update_record["type"]:"" == "" || update_record["key"]:"" == "") {
        y2error("$[key:?] and $[type:?] is not defined");
        return false;
    }

    string _current_zone_ = "." + current_zone["zone"]:"" + (regexpmatch (current_zone["zone"]:"", "\\.$") ? "":".");

    // relative hostnames are converted to absolute
    if (regexpmatch(tolower(update_record["type"]:""),"^\(a\|ns\|mx\|cname\)$")) {
        if (regexpmatch (update_record["key"]:"", ".*[^.]$"))
            update_record["key"] = update_record["key"]:"" + _current_zone_;
    }
    if (regexpmatch(tolower(update_record["type"]:""),"^\(ns\|mx\|cname\)$")) {
        if (regexpmatch (update_record["value"]:"", ".*[^.]$"))
            update_record["value"] = update_record["value"]:"" + _current_zone_;
    }

    if (tolower (update_record["type"]:"") == "txt") {
        update_record["value"] = "\"" + mergestring (splitstring (update_record["value"]:"", "\""), "\\\"") + "\"";
    }

    // If absolute name && doesn't match the current zone...
    // nsupdate would refuse such change
    if (
	regexpmatch (update_record["key"]:"", "\\.$") &&
	! issubstring (update_record["key"]:"", _current_zone_) &&
	// e.g., NS for zone
	update_record["key"]:"" != current_zone["zone"]:"" + "."
    ) {
	y2warning ("Wrong record '%1' for zone '%2'", update_record["key"]:"", _current_zone_);
	return false;
    }

    current_zone["update_actions"] = add (current_zone["update_actions"]:[], $[
        "operation"     : operation,
        "type"          : update_record["type"]:"",
        "key"           : update_record["key"]:"",
        "value"         : update_record["value"]:"",
    ]);

    return true;
}

global map MakeFQDNRecord (map one_record, string & from_zone) {
    // relative name to the zone name
    if (! regexpmatch (one_record["key"]:"", "\\.$")) {
	one_record["key"] = one_record["key"]:"" + "." + from_zone;
    }

    return one_record;
}

global void RegenerateReverseZoneFrom (string regenerate_zone, string from_zone) {
    y2milestone ("Regenerating zone %1 from zone %2", regenerate_zone, from_zone);

    map <string, any> current_zone = $[];

    if (! IsReverseZone (regenerate_zone)) {
	y2error ("Not a reverse zone: %1", regenerate_zone);
	return;
    }

    if (IsReverseZone (from_zone)) {
	y2error ("Not a forward zone: %1", from_zone);
	return;
    }

    // Fetch the original zone records
    // to generate reverse records later
    integer index = DnsServer::FindZone (from_zone);
    if (index == nil || index < 0) {
	y2error ("Cannot find zone: %1", from_zone);
	return;
    }

    DnsServer::SelectZone (index);
    current_zone = DnsServer::FetchCurrentZone();
    list <map> original_zone_records = (list <map>) current_zone["records"]:[];

    // Fetch the zone to edit
    index = DnsServer::FindZone (regenerate_zone);
    if (index == nil || index < 0) {
	y2error ("Cannot find zone: %1", regenerate_zone);
	return;
    }

    DnsServer::SelectZone (index);
    current_zone = DnsServer::FetchCurrentZone();

    // we leave these records untouched
    list <string> leave_these_records = ["SOA", "NS"];

    // Delete all current records from zone
    integer counter = -1;
    list <map> zone_records = (list <map>) current_zone["records"]:[];

    // run through copy of the list of records
    foreach (map one_record, zone_records, {
	counter = counter + 1;
	if (contains (leave_these_records, tostring (one_record["type"]:"")))
	    return;

	// change it to nil and remove later
	current_zone["records", counter] = nil;
	// ORIGIN is a special case, handled by bind itself if zone is dynamic
	if (tostring (one_record["type"]:"") != "ORIGIN") {
	    // dynamic zone
	    HandleNsupdate (one_record, "delete", current_zone);
	}
    });

    // remove nil records
    current_zone["records"] = filter (map one_record, (list <map>) current_zone["records"]:[], {
	return one_record != nil;
    });

    // Creating FQDN
    if (! regexpmatch (regenerate_zone, "\\.$"))
	regenerate_zone = regenerate_zone + ".";
    if (! regexpmatch (from_zone, "\\.$"))
	from_zone = from_zone + ".";

    map new_record = $[];

    // Go through all A, resp. AAAA, and add them in reverse order
    // IPv4 or IPv6?
    if (regexpmatch (regenerate_zone, "\\.ip6\\.arpa\\.?$")) {
	foreach (map one_record, original_zone_records, {
	    if (one_record["type"]:"" == "AAAA") {
		// FIXME: make a PTR
		one_record = MakeFQDNRecord (one_record, from_zone);
		new_record = $[
		    "key" : DnsServerAPI::GetReverseIPforIPv6 (one_record["value"]:""),
		    "type" : "PTR",
		    "value" : one_record["key"]:"",
		];
		// FIXME: something more offective?
		current_zone["records"] = add (current_zone["records"]:[], new_record);
		HandleNsupdate (new_record, "add", current_zone);
	    }
	});
    } else {
	foreach (map one_record, original_zone_records, {
	    if (one_record["type"]:"" == "A") {
		one_record = MakeFQDNRecord (one_record, from_zone);
		new_record = $[
		    "key" : DnsServerAPI::GetReverseIPforIPv4 (one_record["value"]:""),
		    "type" : "PTR",
		    "value" : one_record["key"]:"",
		];
		// FIXME: something more offective?
		current_zone["records"] = add (current_zone["records"]:[], new_record);
		HandleNsupdate (new_record, "add", current_zone);
	    }
	});
    }

    DnsServer::StoreCurrentZone (current_zone);
    DnsServer::StoreZone ();
}

/* EOF */
}
