/**
 * File:	include/dns-server/widgets.ycp
 * Package:	Configuration of dns-server
 * Summary:	Widgets used by DNS server configuration
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

    textdomain "dns-server";

    import "Label";
    import "Popup";
    import "LogView";
    import "CWM";
    import "DnsServer";
    import "TablePopup";

// start service widget

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void startInit (string id) ``{
    boolean ss = DnsServer::GetStartService();
    UI::ChangeWidget (`id ("start"), `Value, ss);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void startStore (string id, map event) ``{
    boolean ss = (boolean)UI::QueryWidget (`id ("start"), `Value);
    DnsServer::SetStartService (ss);
}

/**
 * Handle function of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 * @return symbol always nil
 */
global define symbol startHandle (string id, map event) ``{
    boolean start = (boolean)UI::QueryWidget (`id ("start"), `Value);
    if (start != DnsServer::GetStartService ())
	DnsServer::SetModified ();
    return nil;
}

/**
 * Get the widget description map
 * @return list of items for the table
 */
global define map getStartWidget () ``{
    return $[
	"widget" : `checkbox,
	// check box
	"label" : _("&Start DNS server"),
	"help" : HELPS["start"]:"",
	"init" : startInit,
	"handle" : startHandle,
	"store" : startStore,
	"opt" : [`notify],
    ];
}

// chroot widget

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void chrootInit (string id) ``{
    boolean ss = DnsServer::GetChrootJail();
    UI::ChangeWidget (`id (id), `Value, ss);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void chrootStore (string id, map event) ``{
    boolean ss = (boolean)UI::QueryWidget (`id (id), `Value);
    DnsServer::SetChrootJail (ss);
}

/**
 * Handle function of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 * @return symbol always nil
 */
global define symbol chrootHandle (string id, map event) ``{
    boolean start = (boolean)UI::QueryWidget (`id (id), `Value);
    if (start != DnsServer::GetChrootJail ())
	DnsServer::SetModified ();
    return nil;
}

/**
 * Get the widget description map
 * @return list of items for the table
 */
global define map getChrootWidget () ``{
    return $[
	"widget" : `checkbox,
	// check box
	"label" : _("&Run DNS sevrer in chroot jail"),
	"help" : HELPS["chroot"]:"",
	"init" : chrootInit,
	"store" : chrootStore,
    ];
}

// zone direction widget (forward/reverse)

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void zoneDirectionInit (string id) ``{
    string zone = current_zone["zone"]:"";
    UI::ChangeWidget (`id (id), `CurrentButton,
	issubstring (zone, "in-addr.arpa") ? "reverse" : "forward");
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void zoneDirectionStore (string id, map event) ``{
    string zone = current_zone["zone"]:"";
    string current = (string)UI::QueryWidget (`id (id), `CurrentButton);
    if (current == "forward" && issubstring (zone, "in-addr.arpa"))
	zone = "";
    else if (current == "reverse" && ! issubstring (zone, "in-addr.arpa"))
	zone = "in-addr.arpa";
    current_zone["zone"] = zone;
}

/**
 * Get the widget description map
 * @return list of items for the table
 */
define map getZoneDirectionWidget () ``{
    return $[
	"widget" : `radio_buttons,
	"items" : [
	    ["forward", _("For&ward")],
	    ["reverse", _("Re&verse")],
	],
	"vspacing" : 1,
	"label" : _("Zone direction"),
	"help" : HELPS["zone_direction"]:"TODO",
	"init" : zoneDirectionInit,
	"store" : zoneDirectionStore,
    ];
}

// zone type widget (master/slave/...)

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void zoneTypeInit (string id) ``{
    string type = current_zone["type"]:"master";
    UI::ChangeWidget (`id (id), `CurrentButton, type);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void zoneTypeStore (string id, map event) ``{
    string type = (string)UI::QueryWidget (`id (id), `CurrentButton);
    current_zone["type"] = type;
}

/**
 * Get the widget description map
 * @return list of items for the table
 */
define map getZoneTypeWidget () ``{
    return $[
	"widget" : `radio_buttons,
	"items" : [
            // radio button, type of zone
	    ["master", _("&Master")],
            // radio button, type of zone
	    ["slave", _("&Slave")],
            // radio button, type of zone
	    ["stub", _("S&tub")],
	],
	"vspacing" : 1,
	"label" : _("Zone type"),
	"help" : HELPS["zone_type"]:"TODO",
	"init" : zoneTypeInit,
	"store" : zoneTypeStore,
    ];
}

// zone name widget

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void zoneNameInit (string id) ``{
    string name = current_zone["zone"]:"";
    UI::ChangeWidget (`id (id), `Value, name);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void zoneNameStore (string id, map event) ``{
    string name = (string)UI::QueryWidget (`id (id), `Value);
    current_zone["zone"] = name;
}

/**
 * Get the widget description map
 * @return list of items for the table
 */
global define map getZoneNameWidget () ``{
    return $[
	"widget" : `textentry,
	"label" : _("Zone &name"),
	"init" : zoneNameInit,
	"store" : zoneNameStore,
    ];
}

// soa widget

/**
 * Initialize the widget
 * @param id any widget id
 */
global define void soaInit (string id) ``{
    foreach (string r,
	["serial", "refresh", "retry", "expiry", "minimum", "server", "mail"],
    ``{
	    UI::ChangeWidget (`id (r), `Value, current_zone["soa", r]:"");
    });
    UI::ChangeWidget (`id ("ttl"), `Value, current_zone["ttl"]:"");
    UI::SetFocus (`id ("ttl"));
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void soaStore (string id, map event) ``{
    current_zone["soa"] = current_zone["soa"]:$[];
    foreach (`r,
	["serial", "refresh", "retry", "expiry", "minimum", "server", "mail"],
    ``{
	current_zone["soa", r] = UI::QueryWidget (`id (r), `Value);
    });
    current_zone["ttl"] = UI::QueryWidget (`id ("ttl"), `Value);
}

/**
 * Get the widget description map
 * @return list of items for the table
 */
define map getSoaWidget () ``{
    return $[
	"widget" : `custom,
	"init" : soaInit,
	"store" : soaStore,
	"custom_widget" : `VBox (
	    `HBox (
		`VBox (
		    `VWeight (1,
			// text entry
			`TextEntry (`id ("ttl"), _("$TT&L"))),
		    `VWeight (2, `VStretch ()),
		    `VWeight (1,
			// text entry
			`TextEntry (`id ("server"), _("Primary &Source"))),
		    `VWeight (1,
			// text entry
			`TextEntry (`id ("mail"), _("&Administrator's Mail")))
		),
		`HSpacing (1),
		`VBox (
		    `VWeight (1,
			// text entry
			`TextEntry (`id ("serial"), _("Serial"))),
		    `VWeight (1,
			// text entry
			`TextEntry (`id ("refresh"), _("Re&fresh"))),
		    `VWeight (1,
			// text entry
			`TextEntry (`id ("retry"), _("Re&try"))),
		    `VWeight (1,
			// text entry
			`TextEntry (`id ("expiry"), _("E&xpiration"))),
		    `VWeight (1,
			// text entry
			`TextEntry (`id ("minimum"), _("Mi&nimum")))
		)
	    )
	),
	"help" : "TODO",
    ];
}


// soa button

define symbol soaButtonHandle (string key, map event) ``{
    return `soa;
}

/**
 * Get the widget description map
 * @return list of items for the table
 */
define map getSoaButton () ``{
    return $[
	"widget" : `push_button,
	// push button
	"label" : _("Edit &SOA"),
	"handle" : soaButtonHandle,
	"handle_events" : [ "soa_button" ],
    ];
}

/**
 * handle function of a widget
 * @param key any widget key of widget that is processed
 * @param event map event that occured
 * @return symbol symbol for ws or nil
 */
define symbol NsMxButtonHandle (string key, map event) ``{
    return `ns_mx;
}

/**
 * Get the widget description map
 * @return list of items for the table
 */
define map  getNsMxButton () ``{
    return $[
	"widget" : `push_button,
	// push button
	"label" : _("Edit &NS and &MX records"),
	"handle" : NsMxButtonHandle,
	"handle_events" : [ "ns_mx_button" ],
    ];
}
// global table widget

/**
 * Function for getting contents of the global table
 * @param descr map description map of the table
 * @return list of items for the table
 */
global define list getGlobalTableContents (map descr) ``{
    list options = DnsServer::GetGlobalOptions ();
    integer index = -1;
    return maplist (any o, current_section, ``{
	index = index + 1;
	return index;
    });
}

define string globalTableId2Key (map descr, any id) ``{
    integer iid = (integer)id;
    return current_section[iid, "key"]:"";
}

/**
 * Delete function of the global table
 * @param opt_id any option id of selected option
 * @param opt_key any option key of selected option
 * @return boolean true if was really deleted
 */
global define boolean globalTableEntryDelete (any opt_id, any opt_key) ``{
    // message popup
    if (! Popup::YesNo (_("Delete selected entry?")))
	return false;
// FIXME	settings["options"]
//	    = filter (`k, `v, settings["options"]:$[], ``(k != opt_id));
	DnsServer::SetModified ();
	return true;
}

global define void globalTableInit (string id) ``{
    current_section = DnsServer::GetGlobalOptions ();
    TablePopup::TableInitWrapper (id);
}

/**
 * Store function of a widget
 * @param widget any widget key of widget that is processed
 * @param event map event that occured
 */
global define void globalTableStore (any widget, map event) ``{
    DnsServer::SetGlobalOptions (current_section);
}

/**
 * Get map of widget
 * @return map of widget
 */
global define map getGlobalTableWidget () ``{
    map ret = TablePopup::CreateTableDescr ($[
	"add_delete" : true,
	"up_down" : false,
	"unique_keys" : true,
    ], $[
	"init" : globalTableInit,
	"store" : globalTableStore,
	"options" : DnsServerUI::popups,
	"ids" : getGlobalTableContents,
	"id2key" : globalTableId2Key,
	"fallback" : $[
	    "init" : globalPopupInit,
	    "store" : globalPopupStore,
	    "summary" : globalTableEntrySummary,
	],
	"option_delete" : globalTableEntryDelete,
	"add_items" : [ "hostname", "version", "directory", "named-xfer",
	    "dump-file", "memstatistics-file", "pid-file",
	    "statistics-file", "auth-nxdomain", "deallocate-on-exit",
	    "dialup", "fake-iquery", "fetch-glue", "has-old-clients",
	    "host-statistics", "host-statistics-max", "multiple-cnames",
	    "notify", "suppress-initial-notify", "recursion",
	    "rfc2308-type1", "use-id-pool", "treat-cr-as-space",
	    "also-notify", "forward", "forwarders", "check-names",
	    "allow-query", "allow-recursion", "allow-transfer",
	    "blackhole", "listen-on", "query-source", "lame-ttl",
	    "max-transfer-time-in", "max-ncache-ttl", "min-roots",
	    "serial-queries", "transfer-format", "transfers-in",
	    "transfers-out", "transfers-per-ns", "transfer-source",
	    "maintain-ixfr-base", "max-ixfr-log-size", "coresize",
	    "datasize", "files", "stacksize", "cleaning-interval",
	    "heartbeat-interval", "interface-interval",
	    "statistics-interval", "topology", "sortlist", "rrset-order",
	    "preferred-glue",
	],
    ]);
    return ret;
}

// list of zones widget

/**
 * Initialize function of a widget
 * @param key any widget key of widget that is processed
 */
global define void zonesInit (any key) ``{
    integer index = -1;
    list items = maplist (map z, DnsServer::FetchZones(), ``{
	index = index + 1;
	return `item (`id (index), z["zone"]:"", z["type"]:"master");
    });
    UI::ChangeWidget (`id (`zones), `Items, items);
    UI::SetFocus (`id (`zones));
}

/**
 * handle function of a widget
 * @param key any widget key of widget that is processed
 * @param event map event that occured
 * @return symbol symbol for ws or nil
 */
global define symbol zonesHandle (any key, map event) ``{
    UI::SetFocus (`id (`zones));
    integer current = (integer)UI::QueryWidget (`id (`zones), `CurrentItem);
    if (event["ID"]:nil == `add || event["ID"]:nil == `edit
	|| event["ID"]:nil == `zones)
    {
	if (event["ID"]:nil == `add)
	{
	    DnsServer::SelectZone(-1);
	    current_zone = DnsServer::FetchCurrentZone();
	    y2milestone ("New zone: %1", current_zone);
	    return `add;
	}
	else
        {
	    DnsServer::SelectZone(current);
	    current_zone = DnsServer::FetchCurrentZone();
	    y2milestone ("Fetched zone: %1", current_zone);
	    return `edit;
	}
    }
    else if (event["ID"]:nil == `delete)
    {
	// yes-no popup
	if (Popup::YesNo (_("Delete selected zone?")))
	{
/*		all_zones[current] = nil;
		all_zones = filter (`k, all_zones, ``(k != nil));*/
//                DnsServer::RemoveZoneIndex(current, false);
		zonesInit (key);
//		zones_modified = true;
	}
    }
    return nil;
}

/**
 * Get map of widget
 * @return map of widget
 */
global define map getZoneListWidget () ``{
    return $[
	"widget" : `custom,
	"custom_widget" : `VBox (
		`Table (`id (`zones), `opt (`notify), `header (
		    // table header
		    _("Zone"),
		    // table header
		    _("Type")
		), []),
		`HBox (
		    `PushButton (`id (`add), `opt (`key_F3),
			Label::AddButton ()),
		    `PushButton (`id (`edit), `opt (`key_F4),
			Label::EditButton ()),
		    `PushButton (`id (`delete), `opt (`key_F5),
			Label::DeleteButton ()),
		    `HStretch (),
		    `ReplacePoint (`id (`zones_rp), `VBox ())
		)
	),
	"init" : zonesInit,
	"handle" : zonesHandle,
	"help" : HELPS["zones"]:"",
    ];
}

// global menu button

/**
 * Initialize function of a widget
 * @param key any widget key of widget that is processed
 */
define void advMenubuttonInit (string id) ``{
    UI::ReplaceWidget (`zones_rp, `MenuButton (`id (`adv_menubutton),
	// menu button
	_("Ad&vanced"), [
	    // menubutton item
	    `item (`id (`global_options), _("&Edit global options")),
	    // menubutton item
	    `item (`id (`show_log), _("&Display log")),
	]));
}

/**
 * handle function of a widget
 * @param key any widget key of widget that is processed
 * @param event map event that occured
 * @return symbol symbol for ws or nil
 */
define symbol advMenubuttonHandle (string id, map event) ``{
    symbol e = (symbol)(event["ID"]:nil);
    if (e == `global_options)
	return e;
    if (e == `show_log)
    {
	LogView::Display ($[
	    "file" : "/var/log/messages",
	    "grep" : "named",
	    "save" : true,
	    "actions" : [
		// menubutton entry, try to keep short
		[ _("Restart DNS Server"),
		    ``{SCR::Execute (.target.bash,
			"/etc/init.d/named restart");}],
		// menubutton entry, try to keep short
		[ _("Save Settings and Restart DNS Server"),
		    ``{DnsServer::Write ();} ],
	    ],
	]);

    }

    return nil;
}

/**
 * Get map of widget
 * @return map of widget
 */
define map getAdvancedMenubutton () ``{
    return $[
	"init" : advMenubuttonInit,
	"help" : "TODO",
	"handle" : advMenubuttonHandle,
	"handle_events" : [ `global_options, `show_log ],
    ];
}

// name servers widget

/**
 * handle function of a widget
 * @param key any widget key of widget that is processed
 * @param event map event that occured
 * @return symbol symbol for ws or nil
 */
global define symbol nsHandle (string id, map event) ``{
    if (event["ID"]:nil == `ns_add)
    {
	string new = nil;
	UI::OpenDialog (`VBox (
	    `TextEntry (`id (`address), _("&Name server")),
	    `HBox (
		`HStretch (),
		`PushButton (`id (`ok), Label::OKButton ()),
		`PushButton (`id (`cancel), Label::CancelButton ()),
		`HStretch ()
	    )
	));
	any ret = nil;
	while (ret == nil)
	{
	    ret = UI::UserInput ();
	    if (ret == `ok)
		new = (string)UI::QueryWidget (`id (`address), `Value);
	}
	UI::CloseDialog ();
	if (new == nil)
	    return nil;
	current_zone_ns = add (current_zone_ns, new);
    }
    else if (event["ID"]:nil == `ns_delete)
    {
	string selected = (string)
	    UI::QueryWidget (`id (`ns_addresses), `CurrentItem);
	if (selected == nil)
	{
	    // popup message
	    Popup::Message (_("No name server selected"));
	    return nil;
	}
	current_zone_ns = filter (string s, current_zone_ns, ``(
	    s != selected));
    }
    UI::ReplaceWidget (`ns_addresses_rp, `SelectionBox (`id (`ns_addresses),
	// selection box label
	_("&Name servers"),
	current_zone_ns));
    return nil;
}

/**
 * Initialize function of a widget
 * @param key any widget key of widget that is processed
 */
global define void nsInit (string id) ``{
    string zone_name = current_zone["zone"]:"";
    list records = filter (map r, current_zone["records"]:[], ``(
	r["type"]:"" == "NS"
	&& (r["key"]:"" == sformat ("%1.", zone_name)
	    || r["key"]:"" == zone_name)
    ));
    current_zone_ns = maplist (map r, records, ``(r["value"]:""));
    current_zone_ns = filter (string z, current_zone_ns, ``(z != ""));
    nsHandle (id, $[]);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void nsStore (string id, map event) ``{
    string zone_name = current_zone["zone"]:"";
    list records = filter (map r, current_zone["records"]:[], ``(
	! (r["type"]:"" == "NS"
	&& (r["key"]:"" == sformat ("%1.", zone_name)
	    || r["key"]:"" == zone_name))
    ));
    list new_rec = maplist (string a, current_zone_ns, ``(
	$[
	    "key" : sformat ("%1.", zone_name),
	    "type" : "NS",
	    "value" : a,
	]
    ));
    current_zone["records"] = merge (new_rec, records);
}

/**
 * Get map of widget
 * @return map of widget
 */
define map getNameServersWidget () ``{
    return $[
	"widget" : `custom,
	"custom_widget" : `VBox (
	    `ReplacePoint (`id (`ns_addresses_rp),
		`SelectionBox (`id (`ns_addresses),
		    // selection box label
		    _("&Name servers"), [])
	    ),
	    `HBox (
		`HStretch (),
		`PushButton (`id (`ns_add), `opt (`key_F3),
		    Label::AddButton ()),
		`PushButton (`id (`ns_delete), `opt(`key_F5),
		    Label::DeleteButton ()),
		`HStretch ()
	    )
	),
	"init" : nsInit,
	"handle" : nsHandle,
	"store" : nsStore,
	"handle_events" : [ `ns_add, `ns_delete ],
    ];
}

// mail relays widget

/**
 * handle function of a widget
 * @param key any widget key of widget that is processed
 * @param event map event that occured
 * @return symbol symbol for ws or nil
 */
global define symbol mxHandle (string id, map event) ``{
    if (event["ID"]:nil == `mx_add)
    {
	string new = nil;
	UI::OpenDialog (`VBox (
	    `TextEntry (`id (`address), _("&Mail relay")),
	    `IntField (`id (`priority), _("&Priority"), 0, 100, 10),
	    `HBox (
		`HStretch (),
		`PushButton (`id (`ok), Label::OKButton ()),
		`PushButton (`id (`cancel), Label::CancelButton ()),
		`HStretch ()
	    )
	));
	any ret = nil;
	integer priority = 0;
	while (ret == nil)
	{
	    ret = UI::UserInput ();
	    if (ret == `ok)
		new = (string)UI::QueryWidget (`id (`address), `Value);
	}
	priority = (integer)UI::QueryWidget (`id (`priority), `Value);
	UI::CloseDialog ();
	if (new == nil)
	    return nil;
	new = sformat ("%1 %2", priority, new);
	current_zone_mx = add (current_zone_mx, new);
    }
    else if (event["ID"]:nil == `mx_delete)
    {
	string selected = (string)
	    UI::QueryWidget (`id (`mx_addresses), `CurrentItem);
	if (selected == nil)
	{
	    // popup message
	    Popup::Message (_("No name server selected"));
	    return nil;
	}
	current_zone_mx = filter (string s, current_zone_mx, ``(
	    s != selected));
    }
    UI::ReplaceWidget (`mx_addresses_rp, `SelectionBox (`id (`mx_addresses),
	// selection box label
	_("&Mail relays"),
	current_zone_mx));
    return nil;
    return nil;
}

/**
 * Initialize function of a widget
 * @param key any widget key of widget that is processed
 */
global define void mxInit (string id) ``{
    string zone_name = current_zone["zone"]:"";
    list records = filter (map r, current_zone["records"]:[], ``(
	r["type"]:"" == "MX"
	&& (r["key"]:"" == sformat ("%1.", zone_name)
	    || r["key"]:"" == zone_name)
    ));
    current_zone_mx = maplist (map r, records, ``(r["value"]:""));
    current_zone_mx = filter (string z, current_zone_mx, ``(z != ""));
    mxHandle (id, $[]);
}

/**
 * Store settings of the widget
 * @param id string widget id
 * @param event map event that caused storing process
 */
global define void mxStore (string id, map event) ``{
    string zone_name = current_zone["zone"]:"";
    list records = filter (map r, current_zone["records"]:[], ``(
	! (r["type"]:"" == "MX"
	&& (r["key"]:"" == sformat ("%1.", zone_name)
	    || r["key"]:"" == zone_name))
    ));
    list new_rec = maplist (string a, current_zone_mx, ``(
	$[
	    "key" : sformat ("%1.", zone_name),
	    "type" : "MX",
	    "value" : a,
	]
    ));
    current_zone["records"] = merge (new_rec, records);
    return;
}

/**
 * Get map of widget
 * @return map of widget
 */
define map getMailRelaysWidget () ``{
    return $[
	"widget" : `custom,
	"custom_widget" : `VBox (
	    `ReplacePoint (`id (`mx_addresses_rp),
		`SelectionBox (`id (`mx_addresses),
		    `opt (`notify, `immediate),
		    // selection box label
		    _("&Mail relays"), [])
	    ),
	    `HBox (
		`HStretch (),
		`PushButton (`id (`priority), _("Set &priority")),
		`HStretch ()
	    ),
	    `HBox (
		`HStretch (),
		`PushButton (`id (`mx_add), `opt (`key_F3),
		    Label::AddButton ()),
		`PushButton (`id (`mx_delete), `opt(`key_F5),
		    Label::DeleteButton ()),
		`HStretch ()
	    )
	),
	"init" : mxInit,
	"handle" : mxHandle,
	"store" : mxStore,
    ];
}

// master domain options

/**
 * Convert id to key
 * @param table map widget description map
 * @param opt_id any option id
 * @return any option key
 */
global define any masterId2Key (map table, any opt_id) ``{
    integer index = (integer)opt_id;
    return current_zone["records", index, "type"]:"A";
}

/**
 * Function for getting contents of the master table
 * @param descr map description map of the table
 * @return list items for the table
 */
global define list getMasterTableContents (map descr) ``{
    string zone_name = current_zone["zone"]:"";
    integer index = -1;
    list ret = maplist (map m, current_zone["records"]:[], ``{
	index = index + 1;
/*	if ((m["type"]:"" == "NS" || m["type"]:"" == "MX")
	    && (m["key"]:"" == sformat ("%1.", zone_name)
		|| m["key"]:"" == zone_name))
	{
	    return nil;
	}*/
	return index;
    });
    ret = filter (integer r, ret, ``(r != nil));
    return ret;
}



/**
 * Get map of widget
 * @return map of widget
 */
global define map getMasterTableWidget () ``{
    map ret = TablePopup::CreateTableDescr ($[
	"add_delete_buttons" : true,
	"up_down_buttons" : false
    ], $[
	"options" : DnsServerUI::popups,
	"ids" : getMasterTableContents,
	"id2key" : masterId2Key,
	"fallback" : $[
	    "init" : masterPopupInit,
	    "store" : masterPopupStore,
	    "summary" : masterTableEntrySummary,
	    "label_func" : masterTableLabelFunc,
	],
	"add_items" : [ "A", "CNAME", "PTR", "NS", "MX" ],
	"help" : HELPS["master_zone"]:"",
    ]);
    return ret;
}

// slave table

    /**
      * Function for getting contents of the slave table
      * @param descr map description map of the table
      * @return list items for the table
      */
    global define list getSlaveTableContents (map descr) ``{
	list ret = [ "masters"];
	return ret;
    }

    /**
      * Get map of widget
      * @return map of widget
      */
    global define map getSlaveTableWidget () ``{
        map ret = TablePopup::CreateTableDescr ($[
	    "add_delete_buttons" : false,
	    "up_down_buttons" : false
	], $[
/*            "store" : ``(DnsServer::masterTableStore ()),
            "options" : DnsServer::popups,
            "ids" : ``(DnsServer::getSlaveTableContents ()),
            "fallback" : $[
                "init" : ``(DnsServer::masterPopupInit ()),
                "store" : ``(DnsServer::masterPopupStore ()),
                "summary" : ``(DnsServer::masterTableEntrySummary ()),
            ],
            "add_items" : [ "check-names", "allow-update", "allow-query",
		"allow-transfer", "forward", "forwarders", "dialup", "notify",
		"also-notify", "pubkey",
	    ],*/
        ]);
        return ret;
    }



// generic stuff

    /**
      * Create the wodgets description map
      * @return the widgets description map
      */
    global define map InitWidgets () ``{
	return $[
	    "global_table" : getGlobalTableWidget (),
	    "zones" : getZoneListWidget (),
	    "master_table" : getMasterTableWidget (),
	    "slave_table" : getSlaveTableWidget (),
	    "start" : getStartWidget (),
	    "chroot" : getChrootWidget (),
	    "zone_direction" : getZoneDirectionWidget (),
	    "zone_type" : getZoneTypeWidget (),
	    "zone_name" : getZoneNameWidget (),
	    "soa" : getSoaWidget (),
	    "soa_button" : getSoaButton (),
	    "advanced_mbutton" : getAdvancedMenubutton (),
	    "ns_widget" : getNameServersWidget (),
	    "mx_widget" : getMailRelaysWidget (),
	    "ns_mx_button" : getNsMxButton (),
	];
    }

}
