/**
 * File:	include/dns-server/options.ycp
 * Package:	Configuration of dns-server
 * Summary:	Table options and popups used by DNS server configuration
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "dns-server";

import "Label";
import "CWM";
import "DnsServer";

// global table fallback handlers

/**
 * Fallback initialization function of a table entry / popup
 * @param opt_id any option id
 * @param opt_key any option key
 */
global define void globalPopupInit (any opt_id, string opt_key) ``{
    integer oid = (integer)opt_id;
    UI::ChangeWidget (`id (opt_key), `Value,
	current_section[oid, "value"]:"");
    UI::SetFocus (`id (opt_key));
}

/**
 * Fallback store function of a table entry / popup
 * @param opt_id any option id
 * @param opt_key any option key
 */
global define void globalPopupStore (any opt_id, string opt_key) ``{
    integer oid = (integer)opt_id;
    current_section[oid, "value"] = UI::QueryWidget (`id (opt_key), `Value);
    DnsServer::SetModified ();
}

/**
 * Fallback summary function of a table entry / popup
 * @param opt_id any option id
 * @param opt_key any option key
 * @return string table entry summary
 */
global define string globalTableEntrySummary (any opt_id, string opt_key)``{
    integer oid = (integer)opt_id;
    return sformat ("%1", current_section[oid, "value"]:"");
}

    /**
      * Ask for type of new record to the zone file
      * @param type symbol type of zone
      * @return symbol type of new record or nil if canceled
      */
    global define symbol askForRecType (symbol type) ``{
	term buttons = `Empty ();
	if (type == `normal)
	    buttons = `VBox (
		// zone record type
		`Left (`RadioButton (`id (`a), _("A"), true)),
		// zone record type
		`Left (`RadioButton (`id (`cname), _("CNAME"), false))
	    );
	term t = `HBox (`HSpacing (1), `VBox (
	    // heading
	    `Heading (_("Select the Record Type to Add")),
	    `VSpacing (1),
	    `RadioButtonGroup (`id (`rt), buttons),
	    `VSpacing (1),
	    CWM::OkCancelBox (),
	    `VSpacing (1)
	), `HSpacing (1));
	UI::OpenDialog (t);
	UI::SetFocus (`id (`a));
	symbol ret = nil;
	while (ret == nil)
	    ret = (symbol)UI::UserInput ();
	if (ret == `_tp_ok)
	{
	    ret = (symbol)UI::QueryWidget (`id (`rt), `CurrentButton);
	    UI::CloseDialog ();
	    return ret;
	}
	UI::CloseDialog ();
	return nil;
    }



// master domain table fallback handlers

/**
 * Fallback initialization function of a table entry / popup
 * @param opt_id any option id
 * @param opt_key any option key
 */
global define void masterPopupInit (any opt_id, string opt_key) ``{
    integer index = (integer)opt_id;
    string key = current_zone["records", index, "key"]:"";
    string value = current_zone["records", index, "value"]:"";
    UI::ChangeWidget (`key, `Value, key);
    UI::ChangeWidget (`value, `Value, value);
    UI::SetFocus (`key);
}

/**
 * Fallback store function of a table entry / popup
 * @param opt_id any option id
 * @param opt_key any option key
 */
global define void masterPopupStore (any opt_id, string opt_key) ``{
    integer index = (integer)opt_id;
    string key = (string)UI::QueryWidget (`key, `Value);
    string value = (string)UI::QueryWidget (`value, `Value);
    if (index != nil)
    {
	current_zone["records", index, "value"] = value;
	current_zone["records", index, "key"] = key;
    }
    else
    {
	map new_rec = $[
	    "key" : key,
	    "value" : value,
	    "type" : opt_key,
	];
	current_zone["records"] = add (current_zone["records"]:[], new_rec);
    }
}

/**
 * Fallback summary function of a table entry / popup
 * @param opt_id any option id
 * @param opt_key any option key
 * @return string table entry summary
 */
global define string masterTableEntrySummary (any opt_id, string opt_key)``{
    integer index = (integer)opt_id;
    string addr = current_zone["records", index, "value"]:"A";
    // %1 is usually an IP address
    return sformat (_("Unknown record type: %1"), addr);
}

/**
 * Fallback function for determining the first column of the table
 * in order not to depend on the option key
 * @param opt_id any option id
 * @param opt_key any option key
 * @return string the table entry
 */
global define string masterTableLabelFunc (any opt_id, string opt_key) ``{
    integer index = (integer)opt_id;
    return current_zone["records", index, "key"]:"";
}


// adapt firewall

    /**
      * Summary function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      * @return string table entry summary
      */
/*    global define string FirewallSummary (any opt_id, string opt_key) ``{
	return adapt_firewall ? _("Yes") : _("No");
    }

    /**
      * Initialization function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
/*    global define void FirewallInit (any opt_id, string opt_key) ``{
	UI::ChangeWidget (`id ("__firewall"), `Value, adapt_firewall);
	UI::SetFocus (`id ("__firewall"));
    }

    /**
      * Store function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
/*    global define void FirewallStore (any opt_id, string opt_key) ``{
	adapt_firewall = UI::QueryWidget (`id ("__firewall"), `Value);
	DnsServer::SetModified ();
    }

// save everything popup

    /**
      * Summary function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      * @return string table entry summary
      */
/*    global define string SaveAllSummary (any opt_id, string opt_key) ``{
	return save_all ? _("Yes") : _("No");
    }

    /**
      * Initialization function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
/*    global define void SaveAllInit (any opt_id, string opt_key) ``{
	UI::ChangeWidget (`id ("__save_all"), `Value, save_all);
	UI::SetFocus (`id ("__save_all"));
    }

    /**
      * Store function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
/*    global define void SaveAllStore (any opt_id, string opt_key) ``{
	save_all = UI::QueryWidget (`id ("__save_all"), `Value);
	DnsServer::SetModified ();
    }

// Ns/Mx popup

    /**
      * Summary function of a table entry
      * @param opt_id any option id
      * @param opt_key any option key
      * @return string table entry summary
      */
/*    global define string NsMxSummary (any opt_id, string opt_key) ``{
	string zone =  current_zone["zone"]:"" + ".";
	list contents
	    = current_zone["zone_rec", substring (opt_key, 1)]:[];
	return mergestring (contents, " ");
    }

    global list(string) addr_items = [];

    /**
      * Initialization function of a popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
/*    global define void NsMxInit (any opt_id, string opt_key) ``{
	string zone =  current_zone["zone"]:"" + ".";
	list contents
	    = current_zone["zone_rec", substring (opt_key, 1)]:[];
	addr_items = maplist (`c, contents, ``(
	    DeQuote (c)
	));
	UI::ReplaceWidget (`id (`addresses_rp), `SelectionBox (`id (`addresses),
	   `opt (`notify, `immediate),
	    _("Add&resses"), addr_items));
	NsMxHandle (opt_id, opt_key, $["ID": `init]);
    }

    /**
      * Handle function of a popup
      * @param opt_id any option id
      * @param opt_key any option key
      * @param event map event that occured
      */
/*    global define void NsMxHandle (any opt_id, string opt_key, map event) ``{
	UI::SetFocus (`id (`addresses));
	string active = UI::QueryWidget (`id (`addresses), `CurrentItem);
	integer pos = 0;
	while (pos < size (addr_items) && addr_items[pos]:"" != active)
	    pos = pos + 1;
	if (event["ID"]:nil == `up)
	{
	    addr_items = swapItems (addr_items, pos, pos - 1);
	    pos = pos - 1;
	}
	else if (event["ID"]:nil == `down)
	{
	    addr_items = swapItems (addr_items, pos, pos + 1);
	    pos = pos + 1;
	}
	else if (event["ID"]:nil == `delete)
	{
	    addr_items = filter (`i, addr_items, ``(i != active));
	}
	else if (event["ID"]:nil == `add)
	{
	    term popup = `VBox (`VSpacing (1),
	    // textentry header
	    `TextEntry (`id (`address), _("&Address")),
	    `HSpacing (25),
	    `VSpacing (1),
	    `HBox (`HStretch (),
		`PushButton (`id (`ok), `opt (`key_F10, `default),
		    Label::OKButton ()),
		`HStretch (),
		`PushButton (`id (`cancel), `opt (`key_F8),
		    Label::CancelButton ()),
		`HStretch ()
	    ), `VSpacing (1));
	    UI::OpenDialog (popup);
	    UI::SetFocus (`id (`address));
	    symbol pushed = nil;
	    while (pushed == nil)
		pushed = UI::UserInput ();
	    string new_addr = UI::QueryWidget (`id (`address), `Value);
	    UI::CloseDialog ();
	    if (pushed == `ok)
	    {
		addr_items = add (addr_items, new_addr);
	    }
	}

	UI::ChangeWidget (`id (`up), `Enabled, pos > 0);
	UI::ChangeWidget (`id (`down), `Enabled, pos < size (addr_items) - 1);

	if (event["ID"]:nil == `up || event["ID"]:nil == `down
	    || event["ID"]:nil == `delete || event["ID"]:nil == `add
	    || event["ID"]:nil == `init)
	{
	    UI::ReplaceWidget (`id (`addresses_rp),
		`SelectionBox (`id (`addresses),
		    `opt (`notify, `immediate),
		    _("Add&resses"), addr_items));
	    UI::SetFocus (`id (`addresses));
	    UI::ChangeWidget (`id (`delete), `Enabled, size (addr_items) > 0);
	    if (size (addr_items) > 0)
	    {
		if (! contains (addr_items, active))
		{
		    active = addr_items[0]:"";
		}
		UI::ChangeWidget (`id (`addresses),`CurrentItem, active);
	    }
	}
    }


    /**
      * Store function of a popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
/*    global define void NsMxStore (any opt_id, string opt_key) ``{
	current_zone["zone_rec"] = current_zone["zone_rec"]:$[];
	string zone =  current_zone["zone"]:"" + ".";
	current_zone["zone_rec", substring (opt_key, 1)]
	    = addr_items;
    }

// master popup

    /**
      * Summary function of a table entry
      * @param opt_id any option id
      * @param opt_key any option key
      * @return string table entry summary
      */
/*    global define string MastersSummary (any opt_id, string opt_key) ``{
	return current_zone["masters"]:"";
    }

    /**
      * Initialization function of a popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
/*    global define void MastersInit (any opt_id, string opt_key) ``{
	UI::ChangeWidget (`id ("masters"), `Value, current_zone["masters"]:"");
	UI::SetFocus (`id ("masters"));
    }

    /**
      * Store function of a popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
/*    global define void MastersStore (any opt_id, string opt_key) ``{
	current_zone["masters"] = UI::QueryWidget (`id ("masters"), `Value);
    }


/*	map ns_mx_popup = $[
	    "widget" : `custom,
//	    "init" : ``(DnsServer::NsMxInit ()),
//	    "handle" : ``(DnsServer::NsMxHandle ()),
//	    "store" : ``(DnsServer::NsMxStore ()),
	    "custom_widget" : `HBox (
		`VBox (
		    `ReplacePoint (`id (`addresses_rp),
			`SelectionBox (`id (`addresses),
			    `opt (`notify, `immediate),
			    // selection box label
			    _("Add&resses"), [])
		    ),
		    `HBox (
			`HStretch (),
			`PushButton (`id (`add), `opt (`key_F3),
			    Label::AddButton ()),
			`PushButton (`id (`delete), `opt(`key_F5),
			    Label::DeleteButton ()),
			`HStretch ()
		    )
		),
		`HSquash (
		    `VBox (
			`VStretch (),
			// push button
			`PushButton (`id (`up), `opt (`hstretch), _("&Up")),
			// push button
			`PushButton (`id (`down), `opt (`hstretch), _("&Down")),
			`VStretch ()
		    )
		)
	    ),
	];
*/

/*	return $[
	    "_NS" : $[
		"table" : $[
		    // table cell, label
		    "label" : _("Domain Name Servers"),
		    "optional" : false,
		    "summary" : ``(DnsServer::NsMxSummary ()),
		],
		"popup" : ns_mx_popup,
	    ],
	    "_MX" : $[
		"table" : $[
		    // table cell, label
		    "label" : _("Domain Mail Servers"),
		    "optional" : false,
		    "summary" : ``(DnsServer::NsMxSummary ()),
		],
		"popup" : ns_mx_popup,
	    ],
	    "masters" : $[
		"table" : $[
		    // table cell, label
		    "label" : _("Domain Master Name Servers"),
		    "optional" : false,
		    "summary" : ``(DnsServer::MastersSummary ()),
		],
		"popup" : $[
		    "init" : ``(DnsServer::MastersInit ()),
		    "store" : ``(DnsServer::MastersStore ()),
		],
	    ],
	    "__firewall" : $[
		"table" : $[
		    // table cell, label
		    "label" : _("Adapt Firewall"),
		    "optional" : false,
		    "summary" : ``(DnsServer::FirewallSummary ()),
		],
		"popup" : $[
		    "widget" : `checkbox,
		    "init" : ``(DnsServer::FirewallInit ()),
		    "store" : ``(DnsServer::FirewallStore ()),
		],
	    ],
	    "__save_all" : $[
		"table" : $[
		    // table cell, label
		    "label" : _("Force Saving All Settings"),
		    "optional" : false,
		    "summary" : ``(DnsServer::SaveAllSummary ()),
		],
		"popup" : $[
		    "widget" : `checkbox,
		    "init" : ``(DnsServer::SaveAllInit ()),
		    "store" : ``(DnsServer::SaveAllStore ()),
		],
	    ],
	];
    }*/


// A popup

global define string ASummary (any opt_id, string key) ``{
    integer index = (integer)opt_id;
    string addr = current_zone["records", index, "value"]:"A";
    // table entry, %1 is IP address
    return sformat (_("Host %1"), addr);
}

define map getAPopup () ``{
    return $[
	"table" : $[
	    "summary" : ASummary,
	    // combo box item
	    "label" : _("Domain Name Translation"),
	],
	"popup" : $[
	    "widget" : `custom,
	    "custom_widget" :`HBox (`HSpacing (1), `VBox (
		`HSpacing (50),
		// text entry
		`TextEntry (`id (`key), _("&Host name")),
		`VSpacing (2),
		// text entry
		`TextEntry (`id (`value), _("&IP Addresses")),
		`VSpacing (1)
	    ), `HSpacing (1)),
	],
    ];
}


// CNAME popup

global define string CNAMESummary (any opt_id, string key) ``{
    integer index = (integer)opt_id;
    string addr = current_zone["records", index, "value"]:"A";
    // table entry, %1 is host name
    return sformat (_("Alias for %1"), addr);
}

define map getCNAMEPopup () {
    return $[
	"table" : $[
	    "summary" : CNAMESummary,
	    // combo box item
	    "label" : _("Alias for Domain Name"),
	],
	"popup" : $[
	    "widget" : `custom,
	    "custom_widget" : `HBox (`HSpacing (1), `VBox (
		`HSpacing (30),
		// text entry
		`TextEntry (`id (`alias), _("&Alias")),
		`VSpacing (1),
		// text entry
		`TextEntry (`id (`name), _("&Base Host Name")),
		`VSpacing (1)
	    ), `HSpacing (1)),
	],
    ];
}


// PTR popup

global define string PTRSummary (any opt_id, string key) ``{
    integer index = (integer)opt_id;
    string addr = current_zone["records", index, "value"]:"A";
    // table entry, %1 is host name
    return sformat (_("Pointer to %1"), addr);
}

define map getPTRPopup () ``{
    return $[
	"table" : $[
	    "summary" : PTRSummary,
	    // combo box item
	    "label" : _("Reverse translation"),
	],
	"popup" : $[
	    "widget" : `custom,
	    "custom_widget" : `HBox (`HSpacing (1), `VBox (
		`HSpacing (30),
		// text entry
		`TextEntry (`id (`key), _("&IP Address")),
		`VSpacing (1),
		// text entry
		`TextEntry (`id (`value), _("&Host name")),
		`VSpacing (1)
	    ), `HSpacing (1)),
	],
    ];
}



global define string NSSummary (any opt_id, string key) ``{
    integer index = (integer)opt_id;
    string addr = current_zone["records", index, "value"]:"A";
    // table entry, %1 is host name
    return sformat (_("Name Server %1"), addr);
}

define map getNSPopup () ``{
    return $[
	"table" : $[
	    "summary" : NSSummary,
	    // combo box item
	    "label" : _("Name Server"),
	],
	"popup" : $[
	    "widget" : `custom,
	    "custom_widget" : `HBox (`HSpacing (1), `VBox (
		`HSpacing (30),
		// text entry
		`TextEntry (`id (`alias), _("&Domain")),
		`VSpacing (1),
		// text entry
		`TextEntry (`id (`name), _("&Name server")),
		`VSpacing (1)
	    ), `HSpacing (1)),
	],
    ];
}

global define string MXSummary (any opt_id, string key) ``{
    integer index = (integer)opt_id;
    string addr = current_zone["records", index, "value"]:"A";
    list<string> l = splitstring (addr, " ");
    l = filter (string s, l, ``(s != ""));
    string prio = l[0]:"";
    l[0] = "";
    l = filter (string s, l, ``(s != ""));
    addr = mergestring (l, " ");
    // table entry, %1 is host name, %2 is integer
    return sformat (_("Mail Relay %1, priority %2"), addr, prio);
}

global define void MXInit (any opt_id, string key) ``{
    integer index = (integer)opt_id;
    string key = current_zone["records", index, "key"]:"";
    string value = current_zone["records", index, "value"]:"";
    list<string> l = splitstring (value, " ");
    l = filter (string s, l, ``(s != ""));
    string prio = l[0]:"";
    l[0] = "";
    l = filter (string s, l, ``(s != ""));
    value = mergestring (l, " ");
    UI::ChangeWidget (`key, `Value, key);
    UI::ChangeWidget (`value, `Value, value);
    UI::ChangeWidget (`prio, `Value, tointeger (prio));
    UI::SetFocus (`key);
}

global define void MXStore (any opt_id, string opt_key) ``{
    integer index = (integer)opt_id;
    string key = (string)UI::QueryWidget (`key, `Value);
    string value = (string)UI::QueryWidget (`value, `Value);
    integer prio = (integer)UI::QueryWidget (`prio, `Value);
    value = sformat ("%1 %2", prio, value);
    if (index != nil)
    {
	current_zone["records", index, "value"] = value;
	current_zone["records", index, "key"] = key;
    }
    else
    {
	map new_rec = $[
	    "key" : key,
	    "value" : value,
	    "type" : opt_key,
	];
	current_zone["records"] = add (current_zone["records"]:[], new_rec);
    }
}

define map getMXPopup () ``{
    return $[
	"table" : $[
	    "summary" : MXSummary,
	    "init" : MXInit,
	    "store" : MXStore,
	    // combo box item
	    "label" : _("Mail Relay"),
	],
	"popup" : $[
	    "widget" : `custom,
	    "custom_widget" : `HBox (`HSpacing (1), `VBox (
		`HSpacing (30),
		// text entry
		`TextEntry (`id (`alias), _("&Domain Name")),
		`VSpacing (1),
		// text entry
		`TextEntry (`id (`name), _("&Mail Relay")),
		`VSpacing (1),
		// int field
		`IntField (`id (`prio), _("&Priority")),
		`VSpacing (1)
	    ), `HSpacing (1)),
	],
    ];
}

/**
 * Initialize all poups
 * @return map description of all popups/options
 */
global define map InitPopups () ``{
    return $[
	"A" : getAPopup (),
	"CNAME" : getCNAMEPopup (),
	"PTR" : getPTRPopup (),
	"NS" : getNSPopup (),
	"MX" : getMXPopup (),

    ];
}

// EOF

}
